// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "DAISIE_types.h"
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// DAISIE_odeint_cs
state_type DAISIE_odeint_cs(std::string runmod, state_type y, std::vector<double> times, int lx, int kk, state_type par, std::string Stepper, double atol, double rtol);
RcppExport SEXP _DAISIE_DAISIE_odeint_cs(SEXP runmodSEXP, SEXP ySEXP, SEXP timesSEXP, SEXP lxSEXP, SEXP kkSEXP, SEXP parSEXP, SEXP StepperSEXP, SEXP atolSEXP, SEXP rtolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type runmod(runmodSEXP);
    Rcpp::traits::input_parameter< state_type >::type y(ySEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type times(timesSEXP);
    Rcpp::traits::input_parameter< int >::type lx(lxSEXP);
    Rcpp::traits::input_parameter< int >::type kk(kkSEXP);
    Rcpp::traits::input_parameter< state_type >::type par(parSEXP);
    Rcpp::traits::input_parameter< std::string >::type Stepper(StepperSEXP);
    Rcpp::traits::input_parameter< double >::type atol(atolSEXP);
    Rcpp::traits::input_parameter< double >::type rtol(rtolSEXP);
    rcpp_result_gen = Rcpp::wrap(DAISIE_odeint_cs(runmod, y, times, lx, kk, par, Stepper, atol, rtol));
    return rcpp_result_gen;
END_RCPP
}
// DAISIE_CS_max_steps
int DAISIE_CS_max_steps(int rmax_steps);
RcppExport SEXP _DAISIE_DAISIE_CS_max_steps(SEXP rmax_stepsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type rmax_steps(rmax_stepsSEXP);
    rcpp_result_gen = Rcpp::wrap(DAISIE_CS_max_steps(rmax_steps));
    return rcpp_result_gen;
END_RCPP
}
// DAISIE_abm_factor
double DAISIE_abm_factor(double rfactor);
RcppExport SEXP _DAISIE_DAISIE_abm_factor(SEXP rfactorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type rfactor(rfactorSEXP);
    rcpp_result_gen = Rcpp::wrap(DAISIE_abm_factor(rfactor));
    return rcpp_result_gen;
END_RCPP
}
// DAISIE_odeint_iw
state_type DAISIE_odeint_iw(state_type y, std::vector<double> times, List pars, std::string Stepper, double atol, double reltol);
RcppExport SEXP _DAISIE_DAISIE_odeint_iw(SEXP ySEXP, SEXP timesSEXP, SEXP parsSEXP, SEXP StepperSEXP, SEXP atolSEXP, SEXP reltolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< state_type >::type y(ySEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type times(timesSEXP);
    Rcpp::traits::input_parameter< List >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< std::string >::type Stepper(StepperSEXP);
    Rcpp::traits::input_parameter< double >::type atol(atolSEXP);
    Rcpp::traits::input_parameter< double >::type reltol(reltolSEXP);
    rcpp_result_gen = Rcpp::wrap(DAISIE_odeint_iw(y, times, pars, Stepper, atol, reltol));
    return rcpp_result_gen;
END_RCPP
}
// DAISIE_IW_num_threads
int DAISIE_IW_num_threads(Nullable<int> rnumthreads);
RcppExport SEXP _DAISIE_DAISIE_IW_num_threads(SEXP rnumthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Nullable<int> >::type rnumthreads(rnumthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(DAISIE_IW_num_threads(rnumthreads));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_DAISIE_DAISIE_odeint_cs", (DL_FUNC) &_DAISIE_DAISIE_odeint_cs, 9},
    {"_DAISIE_DAISIE_CS_max_steps", (DL_FUNC) &_DAISIE_DAISIE_CS_max_steps, 1},
    {"_DAISIE_DAISIE_abm_factor", (DL_FUNC) &_DAISIE_DAISIE_abm_factor, 1},
    {"_DAISIE_DAISIE_odeint_iw", (DL_FUNC) &_DAISIE_DAISIE_odeint_iw, 6},
    {"_DAISIE_DAISIE_IW_num_threads", (DL_FUNC) &_DAISIE_DAISIE_IW_num_threads, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_DAISIE(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
